compactor:
  enabled: true
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  image:
    registry: null
    repository: null
    tag: null
  nodeSelector: {}
  persistence:
    enabled: true
    size: 20Gi
    storageClass: rook-ceph-block
  podAnnotations: {}
  podLabels: {}
  priorityClassName: null
  resources: {}
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: false
    imagePullSecrets: []
    name: null
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
distributor:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.distributorSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.distributorSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  autoscaling:
    enabled: false
    maxReplicas: 3
    minReplicas: 1
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: null
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  image:
    registry: null
    repository: null
    tag: null
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  priorityClassName: null
  replicas: 2
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
gateway:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.gatewaySelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.gatewaySelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  autoscaling:
    enabled: false
    maxReplicas: 3
    minReplicas: 1
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: null
  basicAuth:
    enabled: true
    htpasswd: '{{ htpasswd (required "''gateway.basicAuth.username'' is required"
      .Values.gateway.basicAuth.username) (required "''gateway.basicAuth.password''
      is required" .Values.gateway.basicAuth.password) }}'
    password: TempoAccesstoDevEnv
    username: cygate
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
  deploymentStrategy:
    type: RollingUpdate
  enabled: true
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  image:
    pullPolicy: IfNotPresent
    registry: docker.io
    repository: nginxinc/nginx-unprivileged
    tag: 1.19-alpine
  ingress:
    annotations:
      cert-manager.io/cluster-issuer: telia-acme-issuer
    enabled: true
    hosts:
    - host: loki-gateway.k8s.dev.zorgo.cygate.se
      paths:
      - path: /
        pathType: Prefix
    ingressClassName: nginx
    tls:
    - hosts:
      - loki-gateway.k8s.dev.zorgo.cygate.se
      secretName: loki-gateway-cert
  nginxConfig:
    file: |
      worker_processes  5;  ## Default: 1
      error_log  /dev/stderr;
      pid        /tmp/nginx.pid;
      worker_rlimit_nofile 8192;

      events {
        worker_connections  4096;  ## Default: 1024
      }

      http {
        client_body_temp_path /tmp/client_temp;
        proxy_temp_path       /tmp/proxy_temp_path;
        fastcgi_temp_path     /tmp/fastcgi_temp;
        uwsgi_temp_path       /tmp/uwsgi_temp;
        scgi_temp_path        /tmp/scgi_temp;

        default_type application/octet-stream;
        log_format   {{ .Values.gateway.nginxConfig.logFormat }}

        {{- if .Values.gateway.verboseLogging }}
        access_log   /dev/stderr  main;
        {{- else }}

        map $status $loggable {
          ~^[23]  0;
          default 1;
        }
        access_log   /dev/stderr  main  if=$loggable;
        {{- end }}

        sendfile     on;
        tcp_nopush   on;
        resolver {{ .Values.global.dnsService }}.{{ .Values.global.dnsNamespace }}.svc.{{ .Values.global.clusterDomain }};

        {{- with .Values.gateway.nginxConfig.httpSnippet }}
        {{ . | nindent 2 }}
        {{- end }}

        server {
          listen             8080;

          {{- if .Values.gateway.basicAuth.enabled }}
          auth_basic           "Loki";
          auth_basic_user_file /etc/nginx/secrets/.htpasswd;
          {{- end }}

          location = / {
            return 200 'OK';
            auth_basic off;
          }

          location = /api/prom/push {
            proxy_pass       http://{{ include "loki.distributorFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
          }

          location = /api/prom/tail {
            proxy_pass       http://{{ include "loki.querierFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
          }

          location ~ /api/prom/.* {
            proxy_pass       http://{{ include "loki.queryFrontendFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
          }

          location = /loki/api/v1/push {
            proxy_pass       http://{{ include "loki.distributorFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
          }

          location = /loki/api/v1/tail {
            proxy_pass       http://{{ include "loki.querierFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
          }

          location ~ /loki/api/.* {
            proxy_pass       http://{{ include "loki.queryFrontendFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
          }

          {{- with .Values.gateway.nginxConfig.serverSnippet }}
          {{ . | nindent 4 }}
          {{- end }}
        }
      }
    httpSnippet: ""
    logFormat: |-
      main '$remote_addr - $remote_user [$time_local]  $status '
              '"$request" $body_bytes_sent "$http_referer" '
              '"$http_user_agent" "$http_x_forwarded_for"';
    serverSnippet: ""
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  podSecurityContext:
    fsGroup: 101
    runAsGroup: 101
    runAsNonRoot: true
    runAsUser: 101
  readinessProbe:
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 15
    timeoutSeconds: 1
  replicas: 3
  resources: {}
  service:
    annotations: {}
    clusterIP: null
    labels: {}
    loadBalancerIP: null
    nodePort: null
    port: 80
    type: ClusterIP
  terminationGracePeriodSeconds: 30
  tolerations: []
  verboseLogging: true
global:
  clusterDomain: cluster.local
  dnsNamespace: kube-system
  dnsService: kube-dns
  image:
    registry: null
  priorityClassName: null
imagePullSecrets: []
indexGateway:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.indexGatewaySelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.indexGatewaySelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  enabled: true
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  image:
    registry: null
    repository: null
    tag: null
  nodeSelector: {}
  persistence:
    enabled: true
    size: 10Gi
    storageClass: rook-ceph-block
  podAnnotations: {}
  podLabels: {}
  priorityClassName: null
  replicas: 2
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 300
  tolerations: []
ingester:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.ingesterSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.ingesterSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  image:
    registry: null
    repository: null
    tag: null
  kind: StatefulSet
  nodeSelector: {}
  persistence:
    enabled: true
    size: 20Gi
    storageClass: rook-ceph-block
  podAnnotations: {}
  podLabels: {}
  priorityClassName: null
  replicas: 4
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 300
  tolerations: []
loki:
  annotations: {}
  config: "auth_enabled: false\n\nserver:\n  http_listen_port: 3100\n  log_level:
    debug\n  graceful_shutdown_timeout: 60s\n  http_server_read_timeout: 120s # allow
    longer time span queries\n  http_server_write_timeout: 120s # allow longer time
    span queries\n  grpc_server_max_recv_msg_size: 104857600 # 32MiB (int bytes),
    default 4MB\n  grpc_server_max_send_msg_size: 104857600 # 32MiB (int bytes), default
    4MB\n\ndistributor:\n  ring:\n    kvstore:\n      store: memberlist\n\nmemberlist:\n
    \ join_members:\n    - {{ include \"loki.fullname\" . }}-memberlist.{{ .Release.Namespace
    }}.svc.{{ .Values.global.clusterDomain }}\n\nquerier:\n  query_ingesters_within:
    4h\n  query_timeout: 5m\n  max_concurrent: 1000\n  engine:\n    timeout: 5m\n\ningester:\n
    \ lifecycler:\n    ring:\n      kvstore:\n        store: memberlist\n      replication_factor:
    3\n      heartbeat_timeout: 10m\n    final_sleep: 60s\n  chunk_idle_period: 2h\n
    \ chunk_block_size: 104857600\n  chunk_encoding: snappy\n  chunk_retain_period:
    1m\n  max_transfer_retries: 0\n  wal:\n    dir: /var/loki/wal\n    replay_memory_ceiling:
    10GB\n\nlimits_config:\n  enforce_metric_name: false\n  reject_old_samples: true\n
    \ reject_old_samples_max_age: 168h\n  max_cache_freshness_per_query: 10m\n  ingestion_rate_mb:
    100\n  ingestion_burst_size_mb: 100\n  max_entries_limit_per_query: 50000\n  max_global_streams_per_user:
    50000\n  max_chunks_per_query: 20000000\n  max_query_parallelism: 32\n  max_query_series:
    5000\n  \n\n{{- if .Values.loki.schemaConfig}}\nschema_config:\n{{- toYaml .Values.loki.schemaConfig
    | nindent 2}}\n{{- end}}\n{{- if .Values.loki.storageConfig}}\nstorage_config:\n{{-
    toYaml .Values.loki.storageConfig | nindent 2}}\n# {{- if .Values.indexGateway.enabled}}\n#
    boltdb_shipper:\n#   index_gateway_client:\n#     server_address: dns:///{{ include
    \"loki.indexGatewayFullname\" . }}:9095\n# {{- end}}\n{{- end}}\n\nchunk_store_config:\n
    \ chunk_cache_config:\n    memcached:\n      batch_size: 100\n      parallelism:
    100\n    memcached_client:\n      timeout: 200ms\n      consistent_hash: true\n
    \     host: loki-distributed-memcached-chunks.kube-logging.svc.cluster.local.\n
    \     service: http\n  write_dedupe_cache_config:\n      memcached:\n        batch_size:
    100\n        parallelism: 100\n      memcached_client:\n        timeout: 200ms\n
    \       consistent_hash: true\n        host: loki-distributed-memcached-index-writes.kube-logging.svc.cluster.local.\n
    \       service: http\n  max_look_back_period: 720h\n\ntable_manager:\n  retention_deletes_enabled:
    true\n  retention_period: 720h\n\nquery_range:\n  align_queries_with_step: true\n
    \ max_retries: 5\n  split_queries_by_interval: 15m\n  parallelise_shardable_queries:
    true\n  cache_results: true\n  results_cache:\n    cache:\n      memcached_client:\n
    \       consistent_hash: true\n        host: loki-distributed-memcached-frontend.kube-logging.svc.cluster.local.\n
    \       max_idle_conns: 16\n        service: http\n        timeout: 500ms\n        update_interval:
    1m\n\nfrontend_worker:\n  frontend_address: {{ include \"loki.queryFrontendFullname\"
    . }}:9095\n  grpc_client_config:\n    max_send_msg_size: 104857600 # 32MiB, default
    = 16777216]\n    max_recv_msg_size: 104857600\n\nquery_scheduler:\n  max_outstanding_requests_per_tenant:
    2048\n  grpc_client_config:\n    # The maximum size in bytes the client can send.\n
    \   # CLI flag: -<prefix>.grpc-max-send-msg-size\n    max_send_msg_size: 104857600
    # 32mb, default = 16777216]\n    max_recv_msg_size: 104857600\n\ningester_client:\n
    \ remote_timeout: 1s\n  grpc_client_config:\n    # The maximum size in bytes the
    client can send.\n    # CLI flag: -<prefix>.grpc-max-send-msg-size\n    max_send_msg_size:
    104857600 # 32mb, default = 16777216]\n    max_recv_msg_size: 104857600\n\nfrontend:\n
    \ log_queries_longer_than: 120s\n  max_outstanding_per_tenant: 2048\n  compress_responses:
    true\n  tail_proxy_url: http://{{ include \"loki.querierFullname\" . }}:3100\n\ncompactor:\n
    \ shared_store: s3\n\nruler:\n  storage:\n    type: local\n    local:\n      directory:
    /etc/loki/rules\n  ring:\n    kvstore:\n      store: memberlist\n  rule_path:
    /tmp/loki/scratch\n  alertmanager_url: https://alertmanager.xx\n  external_url:
    https://alertmanager.xx\n"
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
  existingSecretForConfig: ""
  image:
    pullPolicy: IfNotPresent
    registry: docker.io
    repository: grafana/loki
    tag: null
  podAnnotations: {}
  podLabels: {}
  podSecurityContext:
    fsGroup: 10001
    runAsGroup: 10001
    runAsNonRoot: true
    runAsUser: 10001
  readinessProbe:
    httpGet:
      path: /ready
      port: http
    initialDelaySeconds: 30
    timeoutSeconds: 1
  revisionHistoryLimit: 10
  schemaConfig:
    configs:
    - chunks:
        period: 24h
        prefix: loki_chunks_
      from: "2020-09-07"
      index:
        period: 24h
        prefix: loki_index_
      object_store: s3
      schema: v11
      store: boltdb-shipper
  storageConfig:
    aws:
      access_key_id: PEJECEYZPKM4F1I9Q37A
      bucketnames: zorgo-testing-loki-storage
      endpoint: objects.cygate.io
      http_config:
        idle_conn_timeout: 90s
        insecure_skip_verify: false
        response_header_timeout: 5s
      insecure: false
      s3: null
      s3forcepathstyle: true
      secret_access_key: vUJnSfJ5vD0ipt4EMFjSs6aBKUlmiUBCnjNRAHjJ
    boltdb_shipper:
      active_index_directory: /var/loki/index
      cache_location: /var/loki/index_cache
      cache_ttl: 720h
      index_gateway_client:
        server_address: dns:///loki-distributed-index-gateway:9095
      query_ready_num_days: 7
      shared_store: s3
    index_cache_validity: 30m
    index_queries_cache_config:
      memcached:
        batch_size: 100
        parallelism: 100
      memcached_client:
        consistent_hash: true
        host: loki-distributed-memcached-index-queries.kube-logging.svc.cluster.local.
        service: http
        timeout: 200ms
    max_chunk_batch_size: 500
  structuredConfig: {}
memcached:
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    readOnlyRootFilesystem: true
  image:
    pullPolicy: IfNotPresent
    registry: docker.io
    repository: memcached
    tag: 1.6.7-alpine
  podLabels: {}
  podSecurityContext:
    fsGroup: 11211
    runAsGroup: 11211
    runAsNonRoot: true
    runAsUser: 11211
memcachedChunks:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.memcachedChunksSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.memcachedChunksSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  enabled: true
  extraArgs:
  - -I 32m
  extraEnv: []
  extraEnvFrom: []
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  priorityClassName: null
  replicas: 1
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
memcachedExporter:
  enabled: true
  image:
    pullPolicy: IfNotPresent
    registry: docker.io
    repository: prom/memcached-exporter
    tag: v0.6.0
  podLabels: {}
  resources: {}
memcachedFrontend:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.memcachedFrontendSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.memcachedFrontendSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  enabled: true
  extraArgs:
  - -I 32m
  extraEnv: []
  extraEnvFrom: []
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  priorityClassName: null
  replicas: 1
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
memcachedIndexQueries:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.memcachedIndexQueriesSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.memcachedIndexQueriesSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  enabled: true
  extraArgs:
  - -I 32m
  extraEnv: []
  extraEnvFrom: []
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  priorityClassName: null
  replicas: 1
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
memcachedIndexWrites:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.memcachedIndexWritesSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.memcachedIndexWritesSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  enabled: true
  extraArgs:
  - -I 32m
  extraEnv: []
  extraEnvFrom: []
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  priorityClassName: null
  replicas: 1
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
networkPolicy:
  alertmanager:
    namespaceSelector: {}
    podSelector: {}
    port: 9093
  discovery:
    namespaceSelector: {}
    podSelector: {}
    port: null
  enabled: false
  externalStorage:
    cidrs: []
    ports: []
  ingress:
    namespaceSelector: {}
    podSelector: {}
  metrics:
    cidrs: []
    namespaceSelector: {}
    podSelector: {}
prometheusRule:
  annotations: {}
  enabled: false
  groups: []
  labels: {}
  namespace: null
querier:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.querierSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.querierSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  autoscaling:
    enabled: false
    maxReplicas: 3
    minReplicas: 1
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: null
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  image:
    registry: null
    repository: null
    tag: null
  nodeSelector: {}
  persistence:
    enabled: false
    size: 10Gi
    storageClass: rook-ceph-block
  podAnnotations: {}
  podLabels: {}
  priorityClassName: null
  replicas: 3
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
queryFrontend:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.queryFrontendSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.queryFrontendSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  autoscaling:
    enabled: false
    maxReplicas: 3
    minReplicas: 1
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: null
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  image:
    registry: null
    repository: null
    tag: null
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  priorityClassName: null
  replicas: 2
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
rbac:
  pspEnabled: false
ruler:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.rulerSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.rulerSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  directories: {}
  enabled: false
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  image:
    registry: null
    repository: null
    tag: null
  nodeSelector: {}
  persistence:
    enabled: false
    size: 10Gi
    storageClass: null
  podAnnotations: {}
  podLabels: {}
  priorityClassName: null
  replicas: 1
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 300
  tolerations: []
serviceAccount:
  annotations: {}
  automountServiceAccountToken: true
  create: true
  imagePullSecrets: []
  name: null
serviceMonitor:
  annotations: {}
  enabled: false
  interval: null
  labels: {}
  namespace: null
  namespaceSelector: {}
  relabelings: []
  scheme: http
  scrapeTimeout: null
  tlsConfig: null
tableManager:
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.tableManagerSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.tableManagerSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  enabled: false
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  image:
    registry: null
    repository: null
    tag: null
  nodeSelector: {}
  podAnnotations: {}
  podLabels: {}
  priorityClassName: null
  resources: {}
  serviceLabels: {}
  terminationGracePeriodSeconds: 30
  tolerations: []
